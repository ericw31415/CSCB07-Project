Index: app/src/main/java/ca/utoronto/cscb07project/events/EventDetailsStudent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ca.utoronto.cscb07project.events;\r\n\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.Query;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport ca.utoronto.cscb07project.R;\r\n\r\npublic class EventDetailsStudent extends Fragment {\r\n\r\n    private static final String ARG_EVENT_ID = \"event_id\";\r\n\r\n    private String eventId;\r\n    private TextView eventTitle;\r\n    private TextView eventDateTime;\r\n    private TextView eventLocation;\r\n    private TextView eventDescription;\r\n\r\n    public EventDetailsStudent() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n    public static EventDetailsStudent newInstance(String eventId) {\r\n        EventDetailsStudent fragment = new EventDetailsStudent();\r\n        Bundle args = new Bundle();\r\n        args.putString(ARG_EVENT_ID, eventId);\r\n        fragment.setArguments(args);\r\n        return fragment;\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        if (getArguments() != null) {\r\n            eventId = getArguments().getString(ARG_EVENT_ID);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        View view = inflater.inflate(R.layout.fragment_event_details_student, container, false);\r\n\r\n        eventTitle = view.findViewById(R.id.eventTitleUser);\r\n        eventDateTime = view.findViewById(R.id.eventDateUser);\r\n        eventLocation = view.findViewById(R.id.eventLocationUser);\r\n        eventDescription = view.findViewById(R.id.eventDescUser);\r\n        this.eventId = getArguments().getString(\"eventID\");\r\n\r\n        Button rsvpButton = view.findViewById(R.id.toRSVP); // Assuming the button ID is \"rsvpButton\"\r\n\r\n        rsvpButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                // Handle RSVP button click\r\n                performRSVP();\r\n            }\r\n        });\r\n\r\n        FirebaseDatabase database = FirebaseDatabase.getInstance();\r\n        String eventId = getArguments().getString(\"eventId\");\r\n        DatabaseReference eventsRef = database.getReference(\"Events\").child(eventId);\r\n        eventsRef.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                if (dataSnapshot.exists()) {\r\n                    String title = dataSnapshot.child(\"title\").getValue(String.class);\r\n                    String dateTime = dataSnapshot.child(\"dateTime\").getValue(String.class);\r\n                    String location = dataSnapshot.child(\"location\").getValue(String.class);\r\n                    String description = dataSnapshot.child(\"description\").getValue(String.class);\r\n\r\n                    eventTitle.setText(title);\r\n                    eventDateTime.setText(dateTime);\r\n                    eventLocation.setText(location);\r\n                    eventDescription.setText(description);\r\n                } else {\r\n                    Log.d(\"Why\", \"Not working\");\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                // Handle errors\r\n            }\r\n        });\r\n\r\n        return view;\r\n    }\r\n\r\n    private void performRSVP() {\r\n        // Get the current user from FirebaseAuth\r\n        FirebaseUser currentUser = FirebaseAuth.getInstance().getCurrentUser();\r\n\r\n        if (currentUser != null) {\r\n            // Get the current user's email\r\n            String userEmail = currentUser.getEmail();\r\n\r\n            if (userEmail != null) {\r\n                String eventId = getArguments().getString(\"eventId\");\r\n\r\n                if (eventId != null) {\r\n                    // Check if the RSVP entry already exists\r\n                    DatabaseReference rsvpsRef = FirebaseDatabase.getInstance().getReference(\"RSVPS\");\r\n                    Query query = rsvpsRef.orderByChild(\"eventID\").equalTo(eventId);\r\n\r\n                    query.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                        @Override\r\n                        public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                            boolean hasExistingRSVP = false;\r\n\r\n                            for (DataSnapshot snapshot : dataSnapshot.getChildren()) {\r\n                                RSVP rsvp = snapshot.getValue(RSVP.class);\r\n\r\n                                if (rsvp != null && rsvp.getEmail().equalsIgnoreCase(userEmail)) {\r\n                                    // Entry already exists, handle accordingly\r\n                                    Log.d(\"RSVP\", \"RSVP already exists for Event ID: \" + eventId);\r\n                                    hasExistingRSVP = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            if (!hasExistingRSVP) {\r\n                                // Entry does not exist, add a new RSVP\r\n                                addRSVPToDatabase(eventId, userEmail);\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                            // Handle errors\r\n                        }\r\n                    });\r\n                } else {\r\n                    Log.e(\"RSVP\", \"Event ID is null\");\r\n                }\r\n            } else {\r\n                Log.e(\"RSVP\", \"User email is null\");\r\n            }\r\n        } else {\r\n            Log.e(\"RSVP\", \"No user logged in\");\r\n        }\r\n    }\r\n\r\n    // ...\r\n\r\n    private void addRSVPToDatabase(String eventId, String userEmail) {\r\n        DatabaseReference eventRef = FirebaseDatabase.getInstance().getReference(\"Events\").child(eventId);\r\n        eventRef.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                if (dataSnapshot.exists()) {\r\n                    Event event = dataSnapshot.getValue(Event.class);\r\n                    if (event != null) {\r\n                        // Add the RSVP to the event\r\n                        boolean rsvpAdded = event.addRSVP(userEmail);\r\n                        if (rsvpAdded) {\r\n                            // Update the event in the database\r\n                            eventRef.setValue(event);\r\n                            // Add your logic to handle successful RSVP\r\n                            Log.d(\"RSVP\", \"RSVP added for Event ID: \" + eventId);\r\n                        } else {\r\n                            Log.d(\"RSVP\", \"The event is full and cannot accept more RSVPs\");\r\n                            // Add your logic to handle this case (e.g., show a message)\r\n                        }\r\n                    } else {\r\n                        Log.e(\"RSVP\", \"Event is null\");\r\n                    }\r\n                } else {\r\n                    Log.e(\"RSVP\", \"Event does not exist\");\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                // Handle errors\r\n            }\r\n        });\r\n    }\r\n\r\n// ...\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/ca/utoronto/cscb07project/events/EventDetailsStudent.java b/app/src/main/java/ca/utoronto/cscb07project/events/EventDetailsStudent.java
--- a/app/src/main/java/ca/utoronto/cscb07project/events/EventDetailsStudent.java	(revision 63f0e07bf44b24fd9efc6417aad57bfd5f69ea8e)
+++ b/app/src/main/java/ca/utoronto/cscb07project/events/EventDetailsStudent.java	(date 1701722878734)
@@ -24,7 +24,7 @@
 
 public class EventDetailsStudent extends Fragment {
 
-    private static final String ARG_EVENT_ID = "event_id";
+    private static final String ARG_EVENT_ID = "eventId";
 
     private String eventId;
     private TextView eventTitle;
@@ -61,7 +61,7 @@
         eventDateTime = view.findViewById(R.id.eventDateUser);
         eventLocation = view.findViewById(R.id.eventLocationUser);
         eventDescription = view.findViewById(R.id.eventDescUser);
-        this.eventId = getArguments().getString("eventID");
+        this.eventId = getArguments().getString(ARG_EVENT_ID);
 
         Button rsvpButton = view.findViewById(R.id.toRSVP); // Assuming the button ID is "rsvpButton"
 
@@ -74,7 +74,6 @@
         });
 
         FirebaseDatabase database = FirebaseDatabase.getInstance();
-        String eventId = getArguments().getString("eventId");
         DatabaseReference eventsRef = database.getReference("Events").child(eventId);
         eventsRef.addListenerForSingleValueEvent(new ValueEventListener() {
             @Override
@@ -112,32 +111,33 @@
             String userEmail = currentUser.getEmail();
 
             if (userEmail != null) {
-                String eventId = getArguments().getString("eventId");
+                String userId = userEmail.replace(".", "_");
+                String eventId = getArguments().getString(ARG_EVENT_ID);
 
                 if (eventId != null) {
+                    // Reference to UserEvents node for the current user
+                    DatabaseReference userEventsRef = FirebaseDatabase.getInstance().getReference("UserEvents").child(userId);
+
+                    // Reference to the RSVPs node under the event
+                    DatabaseReference eventRsvpsRef = FirebaseDatabase.getInstance().getReference("Events").child(eventId).child("rsvps");
+
                     // Check if the RSVP entry already exists
-                    DatabaseReference rsvpsRef = FirebaseDatabase.getInstance().getReference("RSVPS");
-                    Query query = rsvpsRef.orderByChild("eventID").equalTo(eventId);
-
-                    query.addListenerForSingleValueEvent(new ValueEventListener() {
+                    userEventsRef.child(eventId).addListenerForSingleValueEvent(new ValueEventListener() {
                         @Override
                         public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
-                            boolean hasExistingRSVP = false;
-
-                            for (DataSnapshot snapshot : dataSnapshot.getChildren()) {
-                                RSVP rsvp = snapshot.getValue(RSVP.class);
-
-                                if (rsvp != null && rsvp.getEmail().equalsIgnoreCase(userEmail)) {
-                                    // Entry already exists, handle accordingly
-                                    Log.d("RSVP", "RSVP already exists for Event ID: " + eventId);
-                                    hasExistingRSVP = true;
-                                    break;
-                                }
-                            }
+                            if (dataSnapshot.exists()) {
+                                // Entry already exists, handle accordingly
+                                Log.d("RSVP", "RSVP already exists for Event ID: " + eventId);
+                                // Add your logic to handle existing RSVP (e.g., show a message)
+                            } else {
+                                // Entry does not exist, add a new RSVP under UserEvents
+                                userEventsRef.child(eventId).setValue(true);
 
-                            if (!hasExistingRSVP) {
-                                // Entry does not exist, add a new RSVP
-                                addRSVPToDatabase(eventId, userEmail);
+                                // Add a new RSVP under the event's rsvps folder
+                                eventRsvpsRef.child(String.valueOf(dataSnapshot.getChildrenCount())).setValue(userEmail);
+
+                                // Add your logic to handle successful RSVP
+                                Log.d("RSVP", "RSVP added for Event ID: " + eventId);
                             }
                         }
 
@@ -157,44 +157,4 @@
         }
     }
 
-    // ...
-
-    private void addRSVPToDatabase(String eventId, String userEmail) {
-        DatabaseReference eventRef = FirebaseDatabase.getInstance().getReference("Events").child(eventId);
-        eventRef.addListenerForSingleValueEvent(new ValueEventListener() {
-            @Override
-            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
-                if (dataSnapshot.exists()) {
-                    Event event = dataSnapshot.getValue(Event.class);
-                    if (event != null) {
-                        // Add the RSVP to the event
-                        boolean rsvpAdded = event.addRSVP(userEmail);
-                        if (rsvpAdded) {
-                            // Update the event in the database
-                            eventRef.setValue(event);
-                            // Add your logic to handle successful RSVP
-                            Log.d("RSVP", "RSVP added for Event ID: " + eventId);
-                        } else {
-                            Log.d("RSVP", "The event is full and cannot accept more RSVPs");
-                            // Add your logic to handle this case (e.g., show a message)
-                        }
-                    } else {
-                        Log.e("RSVP", "Event is null");
-                    }
-                } else {
-                    Log.e("RSVP", "Event does not exist");
-                }
-            }
-
-            @Override
-            public void onCancelled(@NonNull DatabaseError databaseError) {
-                // Handle errors
-            }
-        });
-    }
-
-// ...
-
-
-
 }
Index: app/src/main/java/ca/utoronto/cscb07project/events/Event.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ca.utoronto.cscb07project.events;\r\n\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class Event {\r\n    private int participantLimit;\r\n    private int participantCount;\r\n    private String id;\r\n    private String title;\r\n    private String location;\r\n    private String dateTime;\r\n    private String description;\r\n    private List<String> rsvps;\r\n\r\n    public Event() {\r\n        // Default constructor required for Firebase\r\n    }\r\n\r\n    public Event(String id, String title, String dateTime, String location, String description, int participantLimit) {\r\n        this.id = id;\r\n        this.title = title;\r\n        this.dateTime = dateTime;\r\n        this.location = location;\r\n        this.description = description;\r\n        this.participantLimit = participantLimit; // setting participantLimit\r\n        this.participantCount = 0; // initialize participantCount to 0\r\n        this.rsvps = new ArrayList<>(); // initialize rsvps list\r\n    }\r\n\r\n    public boolean addRSVP(String userEmail) {\r\n        if (rsvps == null) {\r\n            rsvps = new ArrayList<>();\r\n        }\r\n        if(rsvps.size() < participantLimit){\r\n            rsvps.add(userEmail);\r\n            participantCount = rsvps.size() ;\r\n            // Here update the event on Firebase as well\r\n            DatabaseReference databaseReference = FirebaseDatabase.getInstance().getReference().child(\"Events\").child(id);\r\n            databaseReference.setValue(this);\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public String getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(String id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getTitle() {\r\n        return title;\r\n    }\r\n\r\n    public void setTitle(String title) {\r\n        this.title = title;\r\n    }\r\n\r\n    public String getLocation() {\r\n        return location;\r\n    }\r\n\r\n    public void setLocation(String location) {\r\n        this.location = location;\r\n    }\r\n\r\n    public String getDateTime() {\r\n        return dateTime;\r\n    }\r\n\r\n    public void setDateTime(String dateTime) {\r\n        this.dateTime = dateTime;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return title + \" - \" + location;\r\n    }\r\n\r\n    public List<String> getRsvps() {\r\n        return rsvps;\r\n    }\r\n\r\n    public void setRsvps(List<String> rsvps) {\r\n        this.rsvps = rsvps;\r\n    }\r\n\r\n    // Add this method to the Event class\r\n    public boolean isUserRSVP(String userEmail) {\r\n        return rsvps != null && rsvps.contains(userEmail);\r\n    }\r\n    public int getParticipantLimit() {\r\n        return participantLimit;\r\n    }\r\n\r\n    public void setParticipantLimit(int participantLimit) {\r\n        this.participantLimit = participantLimit;\r\n    }\r\n\r\n    public int getParticipantCount() {\r\n        return participantCount;\r\n    }\r\n\r\n    public void setParticipantCount(int participantCount) {\r\n        this.participantCount = participantCount;\r\n    }\r\n\r\n    public static String generateUniqueId() {\r\n        DatabaseReference databaseReference = FirebaseDatabase.getInstance().getReference().child(\"Events\");\r\n        return databaseReference.push().getKey();\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/ca/utoronto/cscb07project/events/Event.java b/app/src/main/java/ca/utoronto/cscb07project/events/Event.java
--- a/app/src/main/java/ca/utoronto/cscb07project/events/Event.java	(revision 63f0e07bf44b24fd9efc6417aad57bfd5f69ea8e)
+++ b/app/src/main/java/ca/utoronto/cscb07project/events/Event.java	(date 1701722312974)
@@ -35,19 +35,20 @@
         if (rsvps == null) {
             rsvps = new ArrayList<>();
         }
-        if(rsvps.size() < participantLimit){
+        if (rsvps.size() < participantLimit) {
             rsvps.add(userEmail);
-            participantCount = rsvps.size() ;
+            participantCount = rsvps.size();
             // Here update the event on Firebase as well
             DatabaseReference databaseReference = FirebaseDatabase.getInstance().getReference().child("Events").child(id);
             databaseReference.setValue(this);
             return true;
-        }
-        else{
+        } else {
             return false;
         }
     }
 
+
+
     public String getId() {
         return id;
     }
